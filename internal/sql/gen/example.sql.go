// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: example.sql

package gen

import (
	"context"
)

const batchCreate = `-- name: BatchCreate :execrows
INSERT INTO book (id, title, author, update_time)
SELECT
    UNNEST($1::TEXT[]),
    UNNEST($2::TEXT[]),
    UNNEST($3::TEXT[]),
    UNNEST($4::BIGINT[])
ON CONFLICT (id) DO UPDATE
    SET
        title = EXCLUDED.title,
        author = EXCLUDED.author,
        update_time = EXCLUDED.update_time
    WHERE update_time < EXCLUDED.update_time
`

type BatchCreateParams struct {
	ID         []string
	Title      []string
	Author     []string
	UpdateTime []int64
}

func (q *Queries) BatchCreate(ctx context.Context, arg BatchCreateParams) (int64, error) {
	result, err := q.db.Exec(ctx, batchCreate,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.UpdateTime,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const create = `-- name: Create :exec
INSERT INTO book (id, title, author, update_time)
VALUES ($1, $2, $3, $4)
`

type CreateParams struct {
	ID         string
	Title      string
	Author     string
	UpdateTime int64
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.Exec(ctx, create,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.UpdateTime,
	)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM book
WHERE id = $1
`

func (q *Queries) Delete(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const get = `-- name: Get :one
SELECT id, title, author, update_time FROM book
WHERE id = $1
`

func (q *Queries) Get(ctx context.Context, id string) (Book, error) {
	row := q.db.QueryRow(ctx, get, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.UpdateTime,
	)
	return i, err
}

const list = `-- name: List :many

SELECT id, title, author, update_time FROM book
`

// TODO: Edit this file to create your own queries.
// Just some contrived examples to get you started.
func (q *Queries) List(ctx context.Context) ([]Book, error) {
	rows, err := q.db.Query(ctx, list)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.UpdateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update = `-- name: Update :exec
UPDATE book
SET
    title = COALESCE(NULLIF($1::text, ''), title), -- should not be empty
    author = CASE $2::boolean WHEN true THEN $3 ELSE author END, -- can be set to empty,
    update_time = $4
WHERE id = $5
`

type UpdateParams struct {
	Title      string
	SetAuthor  bool
	Author     string
	UpdateTime int64
	ID         string
}

func (q *Queries) Update(ctx context.Context, arg UpdateParams) error {
	_, err := q.db.Exec(ctx, update,
		arg.Title,
		arg.SetAuthor,
		arg.Author,
		arg.UpdateTime,
		arg.ID,
	)
	return err
}

const upsert = `-- name: Upsert :exec

INSERT INTO book (id, title, author, update_time)
VALUES ($1, $2, $3, $4)
ON CONFLICT (id) DO UPDATE
SET
    title = $2,
    author = $3,
    update_time = $4
`

type UpsertParams struct {
	ID         string
	Title      string
	Author     string
	UpdateTime int64
}

// only update if the new value is newer
func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) error {
	_, err := q.db.Exec(ctx, upsert,
		arg.ID,
		arg.Title,
		arg.Author,
		arg.UpdateTime,
	)
	return err
}
