// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: message.sql

package gen

import (
	"context"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO message (author, message, create_time)
VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	Author     string
	Message    string
	CreateTime int64
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.db.ExecContext(ctx, createMessage, arg.Author, arg.Message, arg.CreateTime)
	return err
}

const getMessage = `-- name: GetMessage :one
SELECT id, author, message, create_time FROM message
WHERE id = ? LIMIT 1
`

func (q *Queries) GetMessage(ctx context.Context, id int64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessage, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.Author,
		&i.Message,
		&i.CreateTime,
	)
	return i, err
}

const listMessages = `-- name: ListMessages :many
SELECT id, author, message, create_time FROM message
ORDER BY create_time DESC
`

func (q *Queries) ListMessages(ctx context.Context) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, listMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			&i.Message,
			&i.CreateTime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
